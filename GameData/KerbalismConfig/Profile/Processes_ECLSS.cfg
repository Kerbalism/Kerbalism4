KSM_MODULE_DEFINITION
{
  name = LifeSupportProcessBase
  moduleName = ModuleKsmProcessController
  uiGroupName = lsProcess
  uiGroupDisplayName = Life support processes // TODO : localization
}

KSM_MODULE_DEFINITION
{
  name = scrubberBase
  moduleName = ModuleKsmProcessController
  parentDefinition = LifeSupportProcessBase
  processName = scrubber
}

KSM_MODULE_DEFINITION
{
  name = pressureControlBase
  moduleName = ModuleKsmProcessController
  parentDefinition = LifeSupportProcessBase
  processName = pressureControl
}

KSM_MODULE_DEFINITION
{
  name = waterRecyclerBase
  moduleName = ModuleKsmProcessController
  parentDefinition = LifeSupportProcessBase
  processName = waterRecycler
}

KSM_MODULE_DEFINITION
{
  name = wasteProcessorBase
  moduleName = ModuleKsmProcessController
  parentDefinition = LifeSupportProcessBase
  processName = wasteProcessor
}

@KERBALISM_PROFILE:FIRST
{
  // convention: 1 capacity = enough to scrub output of 1 crew member for 1 day
  PROCESS
  {
    name = nonRegenerativeScrubber
    title = #KERBALISM_NonRegenScrubber_title
    desc = #KERBALISM_NonRegenScrubber_desc
    useCapacityResource = true
    modifier = ResHandler.GetResource("nonRegenerativeScrubberCapacity").Amount * ResHandler.GetResource("nonRegenerativeScrubberProcess").Level

    INPUT
    {
      name = KsmWasteAtmosphere
      rate = 0.0024915995    // efficiency starts at 2x, reaches 1 in 6h, then drops below
    }
    INPUT
    {
      name = nonRegenerativeScrubberCapacity
      rate = 0.00003472222222 // consume 0.5 capacity in 4h, simulates the scrubber wearing out over time.
    }
  }

  // convention: 1 capacity = enough to scrub output of 1 crew member
  // 1 kerbal output 0.00124579975 WasteAtmosphere/s, rounded to 0.0014 to account for individuality and floating point rounding
  PROCESS
  {
    name = scrubber
    title = #KERBALISM_Scrubber_title
    desc = #KERBALISM_Scrubber_desc
    // defaults to modifier = ResHandler.GetResource($resourceName).Amount
    INPUT
    {
      name = ElectricCharge
      rate = 0.025
    }
    INPUT
    {
      name = KsmWasteAtmosphere
      rate = 0.0014
    }
    OUTPUT
    {
      name = CarbonDioxide
      rate = 0.0014
      dumpByDefault = true
    }
  }

  // convention: 1 capacity = enough to compensate for leaks in 70 m² surface area (a cube of 40 m³ volume, edge length of 3.42 m) per crew member
  // = 0.00025624796502 N2 to replace the Atmosphere leaked via the atmo leaks process for the above approx needed surface area per crew member
  PROCESS
  {
    name = pressureControl
    title = #KERBALISM_PressureControl_title
    desc = #KERBALISM_PressureControl_desc
    INPUT
    {
      name = ElectricCharge
      rate = 0.00858
    }
    INPUT
    {
      name = Nitrogen
      rate = 0.35  // Much higher than amount needed for leak control to allow speedier pressurization of low pressure habs and inflatables
    }
    OUTPUT
    {
      name = KsmAtmosphere
      rate = 0.35
      canDump = false
    }
  }

  // convention: 1 capacity = enough to recycle output of 1 crew member
  PROCESS
  {
    // ISS currently achieves 75% Water recovery from urine, although its
    // design target was 85% (quality of urine is issue), we use the design
    // target to be gentle on our users.

    // Based on https://en.wikipedia.org/wiki/Urine
    // 0.5% mass of urine is ammonia, we recover 90% of that
    // 0.5% mass of urine is of CarbonDioxide, we recover 90% of that

    name = waterRecycler
    title = #KERBALISM_WaterRecycler_title
    desc = #KERBALISM_WaterRecycler_desc
    INPUT
    {
      name = ElectricCharge
      rate = 0.0446
    }
    INPUT
    {
      name = WasteWater
      rate = 0.00000619
    }
    OUTPUT
    { // 75% of the mass
      name = Water
      rate = 0.0000046657125
    }
    OUTPUT
    {
      name = Ammonia
      rate = 0.00003640347854
      dumpByDefault = true
    }
    OUTPUT
    {
      name = CarbonDioxide
      rate = 0.00001434868016
      dumpByDefault = true
    }
  }

  // convention: 1 capacity = enough to process output of 1 crew member
  PROCESS
  {
    // Reclaim ~85% of all mass in the form of substrate and ammonia, mostly substrate.
    // Feces is considered to the dominant source of Waste.
    name = wasteProcessor
    title = #KERBALISM_WasteProcessor_title
    desc = #KERBALISM_WasteProcessor_desc
    INPUT
    {
      name = ElectricCharge
      rate = 0.065556
    }
    INPUT
    {
      name = Waste
      rate = 0.0000045527
    }
    OUTPUT
    {
      name = Ammonia
      rate = 0.000025
    }
    OUTPUT
    {
      name = Substrate
      rate = 0.00000115
    }
  }
}