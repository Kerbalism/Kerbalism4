@KERBALISM_PROFILE:FIRST
{
// ============================================================================
// RULE : HEALTH
// ============================================================================
  RULE
  {
    name = health
    title = Health issues
    description = Increase due to hunger, thirst, inadequate temperature, lack of oxygen, co2 poisoning and high level radiation.\nRecover slowly when everything is fine.
    maxValue = 1.0
    resetOnRecovery = true
    icon = KerbalismConfig/Textures/icons8-health-48
    
    EFFECT
    {
      name = fatality
      title = death
    }
    
    MODIFIER
    {
      name = hunger
      title = Hunger
      useDurationMultiplier = true
      baseRateDuration = 15d
      // baseRate = 0.000003086
      rateModifier = 1.0 - Process("eating").ExecutedFactor
    }
    
    MODIFIER
    {
      name = thirst
      title = Thirst
      useDurationMultiplier = true
      baseRateDuration = 3d
      // baseRate = 0.000015432
      rateModifier = 1.0 - Process("drinking").ExecutedFactor
    }
    
    MODIFIER
    {
      name = oxygen
      title = Oxygen deprivation
      useDurationMultiplier = false
      baseRateDuration = 3m
      // baseRate = 0.005555556
      rateModifier = if(Habitat.breathingCrewCount = 0, 0.0, 1.0 - Process("breathing").ExecutedFactor)
    }
    
    MODIFIER
    {
      name = temperature
      title = Temperature
      useDurationMultiplier = false
      baseRate = 0.0000007 // 2h at 100k temp diff in 20mÂ² -> 1 / (60 * 60 * 2 * 100 * 20)
      rateModifier = if(EnvTempDiff = 0.0 OR Habitat.livingVolume = 0.0, 0.0, 1.0 - Process("climatization").ExecutedFactor)
    }
    
    MODIFIER
    {
      name = co2Poisoning
      title = CO2 poisoning
      useDurationMultiplier = false
      baseRateDuration = 30m // 30 minutes at 2% CO2 concentration
      // baseRate = 0.000555556 
      rateModifier = if(Habitat.poisoningLevel > 0.02, Habitat.poisoningLevel * 50.0, 0.0)
    }
    
    MODIFIER
    {
      name = radiationPoisoning
      title = Radiation poisoning
      // Acute radiation syndrome
      // Balance assumption : effect start at ~0.1 rad/h (~2.7778e-5 rad/s)
      // Some data points provided here : https://en.wikipedia.org/wiki/Acute_radiation_syndrome
      // | dose (Gy) | dose (rad) | rad/h for 24h | rad/s for 24h | death % | death ETA (24h days) | death ETA (s) | degen rate  |
      // |-----------|------------|---------------|---------------|---------|----------------------|---------------|-------------|
      // | 0,5       | 50         | 2,1           | 5,7870E-04    | 0,025   | 49                   | 4233600       | 2,36206E-07 |
      // | 4         | 400        | 16,7          | 4,6296E-03    | 0,25    | 35                   | 3024000       | 3,30688E-07 |
      // | 7         | 700        | 29,2          | 8,1019E-03    | 0,75    | 21                   | 1814400       | 5,51146E-07 |
      // | 15        | 1500       | 62,5          | 1,7361E-02    | 1       | 7                    | 604800        | 1,65344E-06 |
      // | 30        | 3000       | 125,0         | 3,4722E-02    | 1       | 1                    | 86400         | 1,15741E-05 |
      // With a bit of curve fitting, could look like this : https://www.desmos.com/calculator/owec1toxuq
      // But this is probably overkill and discutable anyway :
      // rateModifier = Max(0.0, if(Habitat.radiationRate < 0.0062, 0.5e-6 + (-0.5204e-6 / (1 + Pow(Habitat.radiationRate / 4e-4, 1.2))), 0.9736e-6 - (1.6e-4 * Habitat.radiationRate) + (1.3e-2 * Pow(Habitat.radiationRate, 2.0))))
      // So let's keep it simple :
      rateModifier = Max(0.0, -9.68435e-9 + 3.48636e-4 * Habitat.radiationRate)
    }
    
    MODIFIER
    {
      name = healing
      title = Healing
      baseRate = -1.0
      useDurationMultiplier = true
      baseRateDuration = 30d // 30 days for full recovery (baseRate = -1.54321e-6)
      zeroRateMode = true // healing happen only when no other health modifier is active
    }
  }
  
  PROCESS
  {
    name = eating
    categoryName = LifeSupport
    title = #KERBALISM_RuleName_eating
    modifier = RulesEnabledCrewCount
    massConservation = true
    
    INPUT
    {
      // Based on ISS figures of dehydrated food of 0.59Kg/meal 3 times/day = 1.77Kg/day.
      // Kerbals use 1/16 of an astronauts use and have 2 meals/day giving figures of 0.036875Kg/meal = 0.07375Kg/day
      name = Food
      rate = 0.00001215
    }
    OUTPUT
    {
      name = Waste
      dumped = true
      dumpedIsTweakable = false
    }
  }
  
  PROCESS
  {
    name = drinking
    categoryName = LifeSupport
    title = #KERBALISM_RuleName_drinking
    modifier = RulesEnabledCrewCount
    massConservation = true
    
    INPUT
    {
      // Based on ISS figures of 1.62Kg/day drinking and 0.8Kg/day to rehydrate food 3 times/day = 2.42 Kg/day.
      // Kerbals use 1/16 of an astronauts use and have 2 meals/day giving figures of 0.10125Kg/day drinking
      // and 0.033125Kg/day to rehydrate food 2 times/day = 0.134375Kg/day.
      name = Water
      rate = 0.00000622
    }
    OUTPUT
    {
      name = WasteWater
      dumped = true
      dumpedIsTweakable = false
    }
  }

  PROCESS
  {
    name = breathing
    categoryName = LifeSupport
    title = Breathing
    modifier = Min(RulesEnabledCrewCount, Habitat.breathingCrewCount) // might not work as intended in some edge cases
    massConservation = true
    
    INPUT
    {
      // Based on ISS figures of 0.84Kg/day. Kerbals use 1/16 of an astronauts use giving figures of 0.0525Kg/day.
      name = Oxygen
      rate = 0.001713537562385
    }
    OUTPUT
    {
      name = KsmWasteAtmosphere
      dumped = true
      dumpedIsTweakable = false
    }
  }
  
  PROCESS
  {
    name = climatization
    categoryName = LifeSupport
    title = Climatization
    modifier = EnvTempDiff * Habitat.livingVolume
    
    INPUT
    {
      name = ElectricCharge
      rate = 0.0001 // per-kelvin (temp diff), per m^3 (living space), per-second
    }
  }

// ============================================================================
// RULE : FITNESS
// ============================================================================

  RULE
  {
    name = fitness
    title = Low gravity effects
    description = Health degradation caused by extended stays in low-g and zero-g environments. Add exercise comforts and provide artificial gravity to counter it. 
    maxValue = 1.0
    maxValueVariance = 0.1
    maxValueBadassBonus = 0.1
    maxValueLevelBonus = 0.025
    resetOnRecovery = true
    icon = KerbalismConfig/Textures/icons8-fitness-48

    // See following graph :
    // https://www.desmos.com/calculator/uf2t4kx1eb
    // Note : ~ 10 years in zero-g, with a 0.25g ring + 50% exercise

    MODIFIER
    {
      name = lowGravity
      title = Low gravity
      useDurationMultiplier = true
      baseRateDuration = 2y
      // Min body gravity for perpetual fitness : ~0.7g
      rateModifier = Max(0.0, Min(1.0, Pow(-2.0 * Habitat.gravity + 0.983, 3.0) + 0.05))
    }
    
    MODIFIER
    {
      name = artificialGravity
      title = Artificial gravity
      useDurationMultiplier = true
      baseRateDuration = 2y
      
      // cannot recover, only prevent the rule increase
      // only exercise can recover
      cancelRateMode = true
      
      // increase quickly from 0 to 0.4g, plateau at 85 % reduction when in zero-G
      rateModifier = -Max(0.0, Min(1.0, Pow((1.5 * Habitat.artificialGravity) - 1.0, 3.0) + 0.85))
    }
    
    MODIFIER
    {
      name = exercise
      title = Exercise
      useDurationMultiplier = true
      baseRateDuration = 2y

      // 8 years with 100% exercise comfort
      rateModifier = -0.4 * Comfort("exercise").Level
    }
    
    EFFECT
    {
      name = fatality
      title = death
      
      THRESHOLD_CURVE
      {
        key = 0.0 0.7
        key = 1.0 1.0
      }
    }
  }
  
// ============================================================================
// RULE : RADIATION EXPOSURE
// ============================================================================

  RULE
  {
    name = radiationExposure
    title = Radiation exposure
    description = Cumulated radiation exposure will eventually lead to a cancer or another deadly condition.
    maxValue = 1.0
    maxValueVariance = 0.2
    maxValueBadassBonus = 0.05
    resetOnRecovery = false
    icon = KerbalismConfig/Textures/icons8-radiation-48
    
    warningThreshold = 0.45
    dangerThreshold = 0.6
    
    MODIFIER
    {
      name = radiation
      title = Radiation
      // NASA baseline gives 3% probability for a ~70 rad dose absorbed over a year at age 30-40 (page 117 : https://spaceradiation.jsc.nasa.gov/irModels/TP-2013-217375.pdf)
      // This gives a 0.043 % probability per rad
      // Kerbals are strong, let nerf that to 0.01 % (10000 absorbed rads to die from a cancer
      rateModifier = Habitat.radiationRate * 0.0001
    }
    
    EFFECT
    {
      name = fatality
      title = death
      
      THRESHOLD_CURVE
      {
        key = 0.0 0.5
        key = 1.0 1.0
      }
    }
  }
  
// ============================================================================
// RULE : STRESS
// ============================================================================

  RULE
  {
    name = stress
    title = Stress
    description = Stress will cause Kerbals to make mistakes. Maximize comforts and living space to prevent it.
    maxValue = 1.0
    maxValueCourageBonus = 0.1
    maxValueStupidityBonus = -0.1
    maxValueBadassBonus = 0.25
    maxValueLevelBonus = 0.05
    resetOnRecovery = true
    icon = KerbalismConfig/Textures/icons8-stress-48
    
    // https://www.desmos.com/calculator/c0v37hwx1c
    // s1 : stress baseRateDuration
    // l1 : living space baseRateDuration
    // c1 : comfort baseRateDuration
    // l : LivingSpaceFactor
    // c : ComfortBonusFactor
    // t : time (days) to reach 100 % (in days) if positive, time to go from 100 to 0 % if negative
    // s3 : time (days) to reach 100 % (stress modifier only)
    // l3 : time (days) to go from 100 to 0 % (living space modifier only)
    // c3 : time (days) to go from 100 to 0 % (comfort modifier modifier only)
    
    MODIFIER
    {
      name = stress
      title = Living conditions
      useDurationMultiplier = true
      baseRateDuration = 5d
      
      rateModifier = Pow((2.0 - Pow(Habitat.LivingSpaceFactor(20.0), 0.25) - Pow(Habitat.ComfortBonusFactor(), 0.5)) / 2.0, 3.5)
    }
    
    MODIFIER
    {
      name = comfort
      title = Comfort
      useDurationMultiplier = true
      baseRateDuration = 5d
      
      rateModifier = - Pow(0.2 * Habitat.ComfortBonusFactor(), 6.0)
    }
    
    MODIFIER
    {
      name = livingSpace
      title = Living space
      useDurationMultiplier = true
      baseRateDuration = 5d
      
      rateModifier = - Pow(0.4 * Habitat.LivingSpaceFactor(20.0), 6.0)
    }
    
    EFFECT
    {
      name = lostScience
      title = Fat fingers
      cooldown = 10d
      ruleRecovery = 0.2
      ruleRecoveryVariance = 0.1
      
      THRESHOLD_CURVE
      {
        key = 0.0 0.7
        key = 1.0 1.0
      }
    }
    
    EFFECT
    {
      name = lostResource
      title = Wrong valve
      cooldown = 10d
      ruleRecovery = 0.2
      ruleRecoveryVariance = 0.1
      
      THRESHOLD_CURVE
      {
        key = 0.0 0.7
        key = 1.0 1.0
      }
      
      LOST_RESOURCE
      {
        selection = Any
      }
    }
    
    EFFECT
    {
      name = componentFailure
      title = Rage
      cooldown = 10d
      ruleRecovery = 0.2
      ruleRecoveryVariance = 0.1
      
      THRESHOLD_CURVE
      {
        key = 0.0 0.7
        key = 1.0 1.0
      }
    }
  }
  
// ============================================================================
// RULE : HOMESICKNESS
// ============================================================================

  RULE
  {
    name = homesickness
    title = Homesickness
    description = Being far from home is hard, especially when living conditions are poor. Even the most courageous Kerbals will refuse to stay forever in space.
    maxValue = 1.0
    maxValueCourageBonus = 0.2
    maxValueStupidityBonus = -0.2
    maxValueBadassBonus = 0.25
    maxValueLevelBonus = 0.02
    resetOnRecovery = true
    icon = KerbalismConfig/Textures/icons8-homesickness-48
    
    MODIFIER
    {
      name = stress
      title = Stress

      // https://www.desmos.com/calculator/oj56jfhcvi
      // b : baseRateDuration (in days)
      // l : living space factor
      // c : comfort factor
      // t : time to reach 100 % (in years)
      useDurationMultiplier = true
      baseRateDuration = 1y
      rateModifier = Pow((2.0 - Pow(Habitat.LivingSpaceFactor(20.0), 0.25) - Pow(Habitat.ComfortBonusFactor(), 0.5)) / 2.0, 1.75)
    }
    
    EFFECT
    {
      name = inactive
      title = Kerbal on strike
      duration = perpetual
    }
  }
}